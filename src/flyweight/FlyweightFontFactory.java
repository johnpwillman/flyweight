package flyweight;

import java.awt.Font;
import java.util.Hashtable;

/**
 * Singleton Factory for distributing Font objects using the
 * flyweight pattern for storage so as to avoid instantiating 
 * more Font objects than are needed.
 * 
 * @author John Willman
 *
 */
public class FlyweightFontFactory {
	
	//Hashtable to store the generated Fonts.
	private Hashtable<String, Font> fonts;
	
	//Private constructor for singleton implementation
	private FlyweightFontFactory() {
		fonts = new Hashtable<String, Font>();
	}
	
	//Private class instantiates the single Factory instance
	private static class SingletonHolder {
		private final static FlyweightFontFactory INSTANCE = 
				new FlyweightFontFactory();
	}
	
	/**
	 * Returns the singleton instance of the FlyweightFontFactory
	 * @return
	 */
	public static FlyweightFontFactory instance() {
		return SingletonHolder.INSTANCE;
	}
	
	/**
	 * Returns a Font object representing the input specification. If
	 * this Font has not been generated by this factory yet, it is
	 * created. Otherwise, the previously generated Font is returned. 
	 * @param name
	 * @param style
	 * @param size
	 * @return
	 */
	public Font getFlyweight(String name, int style, int size) {
		
		//Create unique name for font for later retrieval from hash
		String fontToRetrieve =
				name + 
				"/" + Integer.toString(style) + 
				"/" + Integer.toString(size);
		
		//Insert font to Hash if it doesn't already exist there
		if (!fonts.contains(fontToRetrieve)) {
			fonts.put(fontToRetrieve, new Font(name, style, size));
		}
		
		return fonts.get(fontToRetrieve);
	}
	
}
