package flyweight;

import java.util.Hashtable;

/**
 * Singleton Factory for distributing AbsCharacter objects using the
 * flyweight pattern for storage so as to avoid instantiating more
 * Character objects than are needed.
 * 
 * @author John Willman
 * REDID: 809362691
 *
 */
public class FlyweightCharacterFactory {
	
	//Hashtable to store the generated AbsCharacters.
	private Hashtable<Character, AbsCharacter> characters;
	
	//Private constructor for singleton implementation
	private FlyweightCharacterFactory() {
		characters = new Hashtable<Character, AbsCharacter>();
	}
	
	//Private class instantiates the single Factory instance
	private static class SingletonHolder {
		private final static FlyweightCharacterFactory INSTANCE = 
				new FlyweightCharacterFactory();
	}
	
	/**
	 * Returns the singleton instance of the FlyweightCharacterFactory
	 * @return
	 */
	public static FlyweightCharacterFactory instance() {
		return SingletonHolder.INSTANCE;
	}
	
	/**
	 * Returns an AbsCharacter class representing the input Java char.
	 * If this char has not been generated by this factory yet, it is
	 * created. Otherwise, the previously generated AbsCharacter is
	 * returned. 
	 * @param charToRetrieve
	 * @return
	 */
	public AbsCharacter getFlyweight(char charToRetrieve) {
		
		//Insert AbsCharacter to hash if it does not exist there
		if (!characters.containsKey(charToRetrieve)) {
			characters.put(
					charToRetrieve, 
					new ConcreteCharacter(charToRetrieve)
					);
		}
		
		return characters.get(charToRetrieve);
	}
	
}
